/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Sample business network definition.
 */

namespace org.doptrace

//---------/* ENUMS */
enum Units{
    o KG
    o L
    o UNIT
}

enum State{
    o HARVESTED
    o IN_TRANSIT
    o APPROVED
    o REGISTERED
    o CERTIFIED
    o REJECTED
    o STORED
    o SOLD
    o EXPIRED
}

//---------/* CONCEPTS */
concept Address{
  o String street
  o String zip regex=/^[0-9]{4}-[0-9]{3}/
  o String city
  o String country
}

concept Contacts{
  o String phoneNumber
  o String email
}

//---------/* PARTICIPANTS */
abstract participant User identified by username{
  o String username
  o String firstname
  o String lastname
  o String password
  o Contacts contacts
}

participant SysAdmin extends User{
}

participant Worker extends User{
  --> Asset operator
}

participant WorkerAdmin extends Worker{
}

//---------/* OPERATORS */
abstract asset Operator identified by id{
  o String id
  o String name
  o String description
  o Address address
  o Contacts contacts
}

asset Producer extends Operator{
}

asset Industry_Retailer extends Operator{
}

asset Logistics extends Operator{
}

asset CertificationEntity extends Operator{
}

//---------/* EVENTS */
abstract asset Events identified by id{
    o String id
    o String description optional
 //   o Double latitude optional
 //   o Double longitude
    o DateTime dateTime
    --> Worker worker
    --> Batch batch
}

asset Harvest extends Events{
    --> Producer producer
}

asset QualityAssessment extends Events{
    --> Industry_Retailer industry_retailer
    o Double amountDowned range=[0.00,]
}

asset BatchRegistration extends Events{
    --> Industry_Retailer industry_retailer
    o Integer[] numberOfBatches range=[1,]
    o Double[] amount range=[0.00,]
}

asset Processing extends Events{
    o String[] processes optional
    --> Industry_Retailer industry_retailer
}

asset Storage extends Events{
    --> Industry_Retailer industry_retailer
}

asset Sale extends Events{
    o Double salePrice range=[0.00,]
    --> Industry_Retailer buyer
    --> Industry_Retailer seller
}

asset Transport extends Events{
    --> Logistics Logistics
    --> Industry_Retailer address
}

asset Analysis extends Events{
    --> CertificationEntity certificationEntity
    o Boolean certificated default = false
}

//---------/* EVENTS */
event checkLocation{
  	// o Double[2] latLong ?
    o Double latitude
    o Double longitude
}

//---------/* BATCH */
asset Batch identified by id {
    o String id
    o Double amount range=[0.00,]
    o Units unit
    o DateTime creationDate
    o DateTime expirationDate
    o State state
    o Boolean certificated default = false
    o String rejection_justification optional
    o Asset[] previousEvents optional
    --> Asset previousOperator optional
    --> Asset currentOperator
    --> PDOProduct pdoProduct
}

//---------/* PDO PRODUCT */
asset PDOProduct identified by id{
    o String id
    o String productName
    o String[] regions
    o String[] requirements
}

//---------/* TRANSACTIONS */
transaction setupDemo {
}

// Troca de pool
abstract transaction moveBatch{
  --> Batch batch
}
  
transaction A_producerToLogistics extends moveBatch{
  --> Producer issuer
  --> Logistics newOwner
}
  
transaction B_logisticsToIndustry extends moveBatch{
  --> Logistics issuer
  --> Industry_Retailer newOwner
}
  
transaction C_batchRegistration { // verificação de quantidades p/lote (numberOfBatches*newBatchAmount = batch.amount)
  --> Batch batch
  --> Industry_Retailer retailer
  o Double numberOfBatches
  o Double newBatchAmount
}

transaction D_industryToEntity extends moveBatch{
  --> Industry_Retailer issuer
  --> CertificationEntity newOwner
}

transaction E_EntityToIndustry extends moveBatch{
  --> CertificationEntity issuer
  --> Industry_Retailer newOwner
}
  
transaction F_EntityToLogistics extends moveBatch{
  --> CertificationEntity issuer
  --> Logistics newOwner
}  
  
transaction query { 
}